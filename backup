<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Albert Baiden-Amissah - Robotics Portfolio</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r158/three.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }


        body {
            font-family: 'Courier New', monospace;
            background: #0a0a0a;
            color: #00ff41;
            overflow-x: hidden;
            cursor: crosshair;
        }

        .matrix-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -2;
            opacity: 0.1;
        }

        .hero {
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            position: relative;
            background: radial-gradient(circle at 50% 50%, rgba(0,255,65,0.1) 0%, transparent 70%);
        }

        .robot-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .hero-title {
            font-size: 4rem;
            text-align: center;
            margin-bottom: 20px;
            text-shadow: 0 0 20px #00ff41;
            animation: glow 2s ease-in-out infinite alternate;
        }

        .hero-subtitle {
            font-size: 1.5rem;
            text-align: center;
            margin-bottom: 40px;
            opacity: 0.8;
            animation: typeWriter 4s steps(50) 1s both;
        }

        @keyframes glow {
            from { text-shadow: 0 0 20px #00ff41; }
            to { text-shadow: 0 0 30px #00ff41, 0 0 40px #00ff41; }
        }

        @keyframes typeWriter {
            0% { width: 0; }
            100% { width: 100%; }
        }

        .nav-menu {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            background: rgba(0,0,0,0.8);
            border: 2px solid #00ff41;
            border-radius: 10px;
            padding: 15px;
        }

        .nav-item {
            display: block;
            color: #00ff41;
            text-decoration: none;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid transparent;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .nav-item:hover {
            border-color: #00ff41;
            background: rgba(0,255,65,0.1);
            box-shadow: 0 0 10px #00ff41;
        }

        .section {
            min-height: 100vh;
            padding: 100px 50px;
            position: relative;
        }

        .section-title {
            font-size: 3rem;
            text-align: center;
            margin-bottom: 50px;
            text-shadow: 0 0 15px #00ff41;
            position: relative;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 3px;
            background: linear-gradient(90deg, transparent, #00ff41, transparent);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }

        .projects-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-top: 50px;
        }

        .project-card {
            background: rgba(0,255,65,0.05);
            border: 2px solid #00ff41;
            border-radius: 15px;
            padding: 30px;
            position: relative;
            transition: all 0.5s ease;
            cursor: pointer;
            overflow: hidden;
        }

        .project-card::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #00ff41, #ff0080, #00ff41);
            border-radius: 15px;
            z-index: -1;
            opacity: 0;
            transition: opacity 0.5s ease;
        }

        .project-card:hover::before {
            opacity: 1;
            animation: borderRotate 2s linear infinite;
        }

        @keyframes borderRotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .project-card:hover {
            transform: translateY(-10px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0,255,65,0.3);
        }

        .project-title {
            font-size: 1.5rem;
            margin-bottom: 15px;
            color: #00ff41;
        }

        .project-description {
            margin-bottom: 20px;
            line-height: 1.6;
            opacity: 0.9;
        }

        .tech-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .tech-tag {
            background: rgba(0,255,65,0.2);
            color: #00ff41;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            border: 1px solid #00ff41;
            animation: float 3s ease-in-out infinite;
        }

        .tech-tag:nth-child(even) {
            animation-delay: 1s;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-5px); }
        }

        .project-demo {
            text-align: center;
            margin-top: 20px;
        }

        .demo-button {
            background: transparent;
            color: #00ff41;
            border: 2px solid #00ff41;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-family: inherit;
            font-size: 1rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .demo-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0,255,65,0.3), transparent);
            transition: left 0.5s ease;
        }

        .demo-button:hover::before {
            left: 100%;
        }

        .demo-button:hover {
            background: rgba(0,255,65,0.1);
            box-shadow: 0 0 20px #00ff41;
            transform: scale(1.05);
        }

        .skills-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 30px;
            margin-top: 50px;
        }

        .skill-category {
            background: rgba(0,255,65,0.05);
            border: 2px solid #00ff41;
            border-radius: 10px;
            padding: 25px;
            text-align: center;
            position: relative;
            transition: all 0.3s ease;
        }

        .skill-category:hover {
            background: rgba(0,255,65,0.1);
            transform: translateY(-5px);
        }

        .skill-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            animation: rotate 10s linear infinite;
        }

        @keyframes rotate {
            0% { transform: rotateY(0deg); }
            100% { transform: rotateY(360deg); }
        }

        .skill-title {
            font-size: 1.3rem;
            margin-bottom: 15px;
            color: #00ff41;
        }

        .skill-progress {
            background: rgba(0,0,0,0.5);
            border-radius: 10px;
            height: 10px;
            margin: 10px 0;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #00ff41, #ff0080);
            border-radius: 10px;
            animation: progressFill 2s ease-out;
        }

        @keyframes progressFill {
            0% { width: 0%; }
        }

        .contact-section {
            background: radial-gradient(circle at center, rgba(0,255,65,0.1), transparent);
            text-align: center;
        }

        .contact-form {
            max-width: 600px;
            margin: 0 auto;
        }

        .form-group {
            margin-bottom: 25px;
            position: relative;
        }

        .form-input, .form-textarea {
            width: 100%;
            padding: 15px;
            background: rgba(0,255,65,0.1);
            border: 2px solid #00ff41;
            border-radius: 10px;
            color: #00ff41;
            font-family: inherit;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input:focus, .form-textarea:focus {
            outline: none;
            box-shadow: 0 0 20px rgba(0,255,65,0.5);
            transform: scale(1.02);
        }

        .form-input::placeholder, .form-textarea::placeholder {
            color: rgba(0,255,65,0.6);
        }

        .submit-button {
            background: transparent;
            color: #00ff41;
            border: 2px solid #00ff41;
            padding: 15px 40px;
            border-radius: 30px;
            cursor: pointer;
            font-family: inherit;
            font-size: 1.1rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .submit-button:hover {
            background: rgba(0,255,65,0.2);
            box-shadow: 0 0 30px #00ff41;
            transform: scale(1.1);
        }

        .terminal-window {
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 400px;
            height: 250px;
            background: rgba(0,0,0,0.9);
            border: 2px solid #00ff41;
            border-radius: 10px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            z-index: 1000;
            overflow-y: auto;
            animation: slideIn 1s ease-out;
        }

        @keyframes slideIn {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(0); }
        }

        .terminal-header {
            color: #00ff41;
            margin-bottom: 10px;
            border-bottom: 1px solid #00ff41;
            padding-bottom: 5px;
        }

        .terminal-line {
            margin: 5px 0;
            animation: terminalType 0.5s ease-out;
        }

        @keyframes terminalType {
            0% { opacity: 0; transform: translateX(-10px); }
            100% { opacity: 1; transform: translateX(0); }
        }

        .cursor {
            animation: blink 1s infinite;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }

        .floating-particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: #00ff41;
            border-radius: 50%;
            animation: floatParticle 15s linear infinite;
            opacity: 0.3;
        }

        @keyframes floatParticle {
            0% {
                transform: translateY(100vh) translateX(0px);
                opacity: 0;
            }
            10% {
                opacity: 0.3;
            }
            90% {
                opacity: 0.3;
            }
            100% {
                transform: translateY(-100px) translateX(100px);
                opacity: 0;
            }
        }

        .interactive-robot {
            position: fixed;
            bottom: 100px;
            right: 50px;
            width: 100px;
            height: 100px;
            cursor: pointer;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .interactive-robot:hover {
            transform: scale(1.2) rotate(10deg);
        }

        .robot-eye {
            width: 15px;
            height: 15px;
            background: #00ff41;
            border-radius: 50%;
            position: absolute;
            animation: robotBlink 3s infinite;
        }

        .robot-eye.left {
            top: 25px;
            left: 25px;
        }

        .robot-eye.right {
            top: 25px;
            right: 25px;
        }

        @keyframes robotBlink {
            0%, 90%, 100% { height: 15px; }
            95% { height: 2px; }
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            z-index: 2000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: rgba(0,255,65,0.05);
            border: 2px solid #00ff41;
            border-radius: 15px;
            padding: 30px;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            animation: modalSlideIn 0.5s ease-out;
        }

        @keyframes modalSlideIn {
            0% { transform: scale(0.5) rotate(180deg); opacity: 0; }
            100% { transform: scale(1) rotate(0deg); opacity: 1; }
        }

        .close-modal {
            position: absolute;
            top: 15px;
            right: 20px;
            background: none;
            border: none;
            color: #00ff41;
            font-size: 2rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .close-modal:hover {
            transform: scale(1.2) rotate(90deg);
            text-shadow: 0 0 10px #00ff41;
        }

        @media (max-width: 768px) {
            .hero-title { font-size: 2.5rem; }
            .hero-subtitle { font-size: 1.2rem; }
            .section { padding: 50px 20px; }
            .projects-grid { grid-template-columns: 1fr; }
            .terminal-window { display: none; }
            .nav-menu { display: none; }
        }
    </style>
</head>
<body>
    <div class="matrix-bg" id="matrixBg"></div>
    <div class="floating-particles" id="particles"></div>

    <nav class="nav-menu">
        <a href="#home" class="nav-item">Home</a>
        <a href="#projects" class="nav-item">Projects</a>
        <a href="#skills" class="nav-item">Skills</a>
        <a href="#contact" class="nav-item">Contact</a>
    </nav>

    <section id="home" class="hero">
        <div class="robot-container" id="robotContainer"></div>
        <h1 class="hero-title">Albert Baiden-Amissah</h1>
        <p class="hero-subtitle">ROBOTICS ENGINEER & AI DEVELOPER</p>
        <div class="demo-button" onclick="initRobotDemo()">INITIALIZE SYSTEMS</div>
    </section>

    <section id="projects" class="section">
        <h2 class="section-title">ROBOTIC PROJECTS</h2>
        <div class="projects-grid">
            <div class="project-card" onclick="showProjectDetails('smartlock')">
                <h3 class="project-title">SMART LOCK SYSTEM</h3>
                <p class="project-description">IoT-based security system with ESP32, featuring real-time control, web dashboard, and automated access management.</p>
                <div class="tech-tags">
                    <span class="tech-tag">ESP32</span>
                    <span class="tech-tag">IoT</span>
                    <span class="tech-tag">Web Dashboard</span>
                    <span class="tech-tag">RTC</span>
                    <span class="tech-tag">NTP</span>
                </div>
                <div class="project-demo">
                    <button class="demo-button">VIEW SYSTEM</button>
                </div>
            </div>

            <div class="project-card" onclick="showProjectDetails('handtracking')">
                <h3 class="project-title">AI HAND TRACKING</h3>
                <p class="project-description">Computer vision system using MediaPipe and OpenCV for real-time gesture recognition and hand measurement.</p>
                <div class="tech-tags">
                    <span class="tech-tag">MediaPipe</span>
                    <span class="tech-tag">OpenCV</span>
                    <span class="tech-tag">Python</span>
                    <span class="tech-tag">AI/ML</span>
                </div>
                <div class="project-demo">
                    <button class="demo-button">RUN DETECTION</button>
                </div>
            </div>

            <div class="project-card" onclick="showProjectDetails('arduino')">
                <h3 class="project-title">ARDUINO AUTOMATION</h3>
                <p class="project-description">Collection of embedded systems including plant watering, motion lights, and temperature controllers.</p>
                <div class="tech-tags">
                    <span class="tech-tag">Arduino</span>
                    <span class="tech-tag">Sensors</span>
                    <span class="tech-tag">Automation</span>
                    <span class="tech-tag">IoT</span>
                </div>
                <div class="project-demo">
                    <button class="demo-button">DEPLOY SYSTEM</button>
                </div>
            </div>

            <div class="project-card" onclick="showProjectDetails('attendance')">
                <h3 class="project-title">FINGERPRINT ATTENDANCE</h3>
                <p class="project-description">Biometric attendance system with fingerprint recognition, data logging, and reporting capabilities.</p>
                <div class="tech-tags">
                    <span class="tech-tag">Biometrics</span>
                    <span class="tech-tag">Database</span>
                    <span class="tech-tag">Security</span>
                    <span class="tech-tag">Reporting</span>
                </div>
                <div class="project-demo">
                    <button class="demo-button">ACCESS SYSTEM</button>
                </div>
            </div>
        </div>
    </section>

    <section id="skills" class="section">
        <h2 class="section-title">TECHNICAL CAPABILITIES</h2>
        <div class="skills-container">
            <div class="skill-category">
                <div class="skill-icon">🤖</div>
                <h3 class="skill-title">ROBOTICS</h3>
                <div class="skill-progress">
                    <div class="progress-bar" style="width: 90%;"></div>
                </div>
                <p>Arduino, ESP32, Sensor Integration, Actuator Control</p>
            </div>

            <div class="skill-category">
                <div class="skill-icon">🧠</div>
                <h3 class="skill-title">ARTIFICIAL INTELLIGENCE</h3>
                <div class="skill-progress">
                    <div class="progress-bar" style="width: 85%;"></div>
                </div>
                <p>Machine Learning, Computer Vision, MediaPipe, OpenCV</p>
            </div>

            <div class="skill-category">
                <div class="skill-icon">💻</div>
                <h3 class="skill-title">PROGRAMMING</h3>
                <div class="skill-progress">
                    <div class="progress-bar" style="width: 88%;"></div>
                </div>
                <p>Python, C++, Embedded C, PHP, SQL, JavaScript</p>
            </div>

            <div class="skill-category">
                <div class="skill-icon">🔧</div>
                <h3 class="skill-title">HARDWARE</h3>
                <div class="skill-progress">
                    <div class="progress-bar" style="width: 92%;"></div>
                </div>
                <p>Circuit Design, PCB Layout, Microcontrollers, IoT</p>
            </div>
        </div>
    </section>

    <section id="contact" class="section contact-section">
        <h2 class="section-title">ESTABLISH CONNECTION</h2>
        <div class="contact-form">
            <form onsubmit="sendMessage(event)">
                <div class="form-group">
                    <input type="text" class="form-input" placeholder="IDENTIFICATION CODE (Name)" required>
                </div>
                <div class="form-group">
                    <input type="email" class="form-input" placeholder="COMMUNICATION CHANNEL (Email)" required>
                </div>
                <div class="form-group">
                    <textarea class="form-textarea" rows="6" placeholder="TRANSMISSION MESSAGE" required></textarea>
                </div>
                <button type="submit" class="submit-button">TRANSMIT MESSAGE</button>
            </form>
        </div>
    </section>

    <div class="terminal-window">
        <div class="terminal-header">SYSTEM STATUS</div>
        <div id="terminalContent">
            <div class="terminal-line">$ system_init.py</div>
            <div class="terminal-line">Initializing robotics portfolio...</div>
            <div class="terminal-line">Loading AI modules... [OK]</div>
            <div class="terminal-line">Connecting sensors... [OK]</div>
            <div class="terminal-line">System ready for interaction</div>
            <div class="terminal-line">Type 'help' for commands <span class="cursor">_</span></div>
        </div>
    </div>

    <div class="interactive-robot" onclick="robotSpeak()">
        <svg width="100" height="100" viewBox="0 0 100 100">
            <rect x="20" y="20" width="60" height="60" fill="none" stroke="#00ff41" stroke-width="2" rx="10"/>
            <circle cx="35" cy="35" r="5" fill="#00ff41" class="robot-eye left"/>
            <circle cx="65" cy="35" r="5" fill="#00ff41" class="robot-eye right"/>
            <rect x="40" y="50" width="20" height="5" fill="#00ff41" rx="2"/>
            <rect x="10" y="40" width="15" height="20" fill="none" stroke="#00ff41" stroke-width="2" rx="5"/>
            <rect x="75" y="40" width="15" height="20" fill="none" stroke="#00ff41" stroke-width="2" rx="5"/>
        </svg>
    </div>

    <div class="modal" id="projectModal">
        <div class="modal-content">
            <button class="close-modal" onclick="closeModal()">&times;</button>
            <div id="modalContent"></div>
        </div>
    </div>

    <script>
        // Matrix background effect
        function createMatrixEffect() {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            document.getElementById('matrixBg').appendChild(canvas);
            
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            const matrix = "ALBERTAMISSAHROBOTICS01110010011100010110111101100010011011110111010001101001011000110111001100100000010001010100111001000111010010010100111001000101010001010101001000100000";
            const matrixArray = matrix.split("");
            
            const fontSize = 10;
            const columns = canvas.width / fontSize;
            const drops = [];
            
            for (let x = 0; x < columns; x++) {
                drops[x] = 1;
            }
            
            function draw() {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.04)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                ctx.fillStyle = '#00ff41';
                ctx.font = fontSize + 'px Courier New';
                
                for (let i = 0; i < drops.length; i++) {
                    const text = matrixArray[Math.floor(Math.random() * matrixArray.length)];
                    ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                    
                    if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                        drops[i] = 0;
                    }
                    drops[i]++;
                }
            }
            
            setInterval(draw, 35);
        }

        // 3D Robot Scene
        function init3DRobot() {
            // Check if Three.js is loaded
            if (typeof THREE === 'undefined') {
                console.warn('Three.js not loaded, skipping 3D robot');
                return;
            }
            
            const container = document.getElementById('robotContainer');
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ alpha: true });
            
            renderer.setSize(window.innerWidth, window.innerHeight);
            container.appendChild(renderer.domElement);
            
            // Create robot
            const robotGroup = new THREE.Group();
            
            // Robot body
            const bodyGeometry = new THREE.BoxGeometry(2, 3, 1.5);
            const bodyMaterial = new THREE.MeshBasicMaterial({ 
                color: 0x00ff41, 
                wireframe: true 
            });
            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
            robotGroup.add(body);
            
            // Robot head
            const headGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.5);
            const head = new THREE.Mesh(headGeometry, bodyMaterial);
            head.position.y = 2.5;
            robotGroup.add(head);
            
            // Robot arms
            const armGeometry = new THREE.BoxGeometry(0.5, 2, 0.5);
            const leftArm = new THREE.Mesh(armGeometry, bodyMaterial);
            leftArm.position.set(-1.5, 0.5, 0);
            const rightArm = new THREE.Mesh(armGeometry, bodyMaterial);
            rightArm.position.set(1.5, 0.5, 0);
            robotGroup.add(leftArm);
            robotGroup.add(rightArm);
            
            scene.add(robotGroup);
            camera.position.z = 8;
            
            function animate() {
                requestAnimationFrame(animate);
                
                robotGroup.rotation.y += 0.005;
                robotGroup.rotation.x = Math.sin(Date.now() * 0.001) * 0.1;
                
                leftArm.rotation.z = Math.sin(Date.now() * 0.003) * 0.5;
                rightArm.rotation.z = -Math.sin(Date.now() * 0.003) * 0.5;
                
                renderer.render(scene, camera);
            }
            
            animate();
        }

        // Floating particles
        function createParticles() {
            const container = document.getElementById('particles');
            
            for (let i = 0; i < 50; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + 'vw';
                particle.style.animationDelay = Math.random() * 15 + 's';
                particle.style.animationDuration = (Math.random() * 10 + 10) + 's';
                container.appendChild(particle);
            }
        }

        // Initialize robot demo
        function initRobotDemo() {
            const terminalContent = document.getElementById('terminalContent');
            const messages = [
                'Initializing quantum processors...',
                'Loading neural networks... [OK]',
                'Calibrating sensors... [OK]',
                'Establishing AI consciousness...',
                'SYSTEM FULLY OPERATIONAL',
                'Welcome to the future of robotics!'
            ];
            
            let i = 0;
            const interval = setInterval(() => {
                if (i < messages.length) {
                    const line = document.createElement('div');
                    line.className = 'terminal-line';
                    line.textContent = '$ ' + messages[i];
                    terminalContent.appendChild(line);
                    terminalContent.scrollTop = terminalContent.scrollHeight;
                    i++;
                } else {
                    clearInterval(interval);
                }
            }, 1000);
        }

        // Robot speak function
        function robotSpeak() {
            const phrases = [
                "GREETINGS, HUMAN. I AM READY TO ASSIST.",
                "SYSTEMS OPERATIONAL. HOW MAY I HELP?",
                "ROBOTICS PROTOCOLS ACTIVE.",
                "AI MODULES FUNCTIONING OPTIMALLY.",
                "AWAITING YOUR COMMANDS.",
                "BEEP BOOP. JUST KIDDING - I'M ADVANCED!",
                "READY TO REVOLUTIONIZE THE FUTURE."
            ];
            
            const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
            
            const terminalContent = document.getElementById('terminalContent');
            const line = document.createElement('div');
            line.className = 'terminal-line';
            line.style.color = '#ff0080';
            line.textContent = '🤖 ' + randomPhrase;
            terminalContent.appendChild(line);
            terminalContent.scrollTop = terminalContent.scrollHeight;
            
            // Add visual feedback
            const robot = document.querySelector('.interactive-robot');
            robot.style.transform = 'scale(1.3) rotate(360deg)';
            setTimeout(() => {
                robot.style.transform = 'scale(1) rotate(0deg)';
            }, 500);
        }

        // Project details
        function showProjectDetails(project) {
            const modal = document.getElementById('projectModal');
            const content = document.getElementById('modalContent');
            
            const projectData = {
                smartlock: {
                    title: 'SMART LOCK SYSTEM',
                    description: 'Advanced IoT security system featuring ESP32 microcontroller integration, real-time web dashboard, and automated access control protocols.',
                    features: [
                        'Real-time Clock (RTC) integration for time-based access',
                        'Network Time Protocol (NTP) synchronization',
                        'Web dashboard for remote monitoring and control',
                        'Encrypted communication protocols',
                        'Battery backup system for power failures',
                        'Mobile app integration for smartphone control'
                    ],
                    demo: 'This system represents the future of home security, combining IoT connectivity with robust embedded systems programming.'
                },
                handtracking: {
                    title: 'AI HAND TRACKING SYSTEM',
                    description: 'Computer vision system utilizing MediaPipe and OpenCV for real-time gesture recognition, hand measurement, and human-computer interaction.',
                    features: [
                        'Real-time hand landmark detection',
                        'Gesture recognition with 21 key points',
                        'Distance and angle measurements',
                        'Multi-hand tracking capabilities',
                        'Custom gesture training modules',
                        'Integration with robotic control systems'
                    ],
                    demo: 'Revolutionary interface technology enabling natural human-robot interaction through advanced computer vision algorithms.'
                },
                arduino: {
                    title: 'ARDUINO AUTOMATION SUITE',
                    description: 'Comprehensive collection of embedded systems for home and industrial automation, featuring sensor integration and intelligent control algorithms.',
                    features: [
                        'Automatic plant watering with soil moisture sensors',
                        'Motion-controlled lighting systems',
                        'Temperature-based fan controllers',
                        'PIR motion detection security systems',
                        'Ultrasonic distance measurement',
                        'I2C communication protocols'
                    ],
                    demo: 'Smart automation solutions bringing intelligence to everyday objects through embedded systems engineering.'
                },
                attendance: {
                    title: 'BIOMETRIC ATTENDANCE SYSTEM',
                    description: 'Advanced fingerprint recognition system with secure data logging, comprehensive reporting, and multi-user management capabilities.',
                    features: [
                        'Fingerprint enrollment and matching',
                        'Secure database storage',
                        'Real-time attendance logging',
                        'Automated report generation',
                        'Admin panel with user management',
                        'Anti-spoofing security measures'
                    ],
                    demo: 'Cutting-edge biometric solution ensuring accurate attendance tracking with military-grade security protocols.'
                }
            };
            
            const data = projectData[project];
            if (data) {
                content.innerHTML = `
                    <h2 style="color: #00ff41; margin-bottom: 20px;">${data.title}</h2>
                    <p style="margin-bottom: 20px; line-height: 1.6;">${data.description}</p>
                    <h3 style="color: #00ff41; margin: 20px 0;">KEY FEATURES:</h3>
                    <ul style="margin: 20px 0; padding-left: 20px;">
                        ${data.features.map(feature => `<li style="margin: 10px 0;">${feature}</li>`).join('')}
                    </ul>
                    <div style="background: rgba(0,255,65,0.1); padding: 20px; border-radius: 10px; border: 1px solid #00ff41; margin-top: 20px;">
                        <h4 style="color: #00ff41; margin-bottom: 10px;">PROJECT ANALYSIS:</h4>
                        <p>${data.demo}</p>
                    </div>
                    <div style="text-align: center; margin-top: 30px;">
                        <button class="demo-button" onclick="runProjectDemo('${project}')">EXECUTE DEMONSTRATION</button>
                    </div>
                `;
                modal.style.display = 'flex';
            }
        }
        
        // Close modal
        function closeModal() {
            const modal = document.getElementById('projectModal');
            modal.style.display = 'none';
        }
        
        // Run project demo
        function runProjectDemo(project) {
            const terminalContent = document.getElementById('terminalContent');
            const demos = {
                smartlock: [
                    'Connecting to ESP32 module...',
                    'Authentication successful',
                    'Lock status: SECURED',
                    'Web dashboard: ACTIVE',
                    'System ready for commands'
                ],
                handtracking: [
                    'Initializing camera feed...',
                    'Loading MediaPipe models...',
                    'Hand detection: ACTIVE',
                    'Gesture recognition: ONLINE',
                    'Tracking 21 landmarks per hand'
                ],
                arduino: [
                    'Connecting to Arduino network...',
                    'Sensor calibration complete',
                    'Automation protocols: ACTIVE',
                    'All systems operational',
                    'Smart home ready'
                ],
                attendance: [
                    'Biometric scanner: ONLINE',
                    'Database connection: SECURE',
                    'Fingerprint matching: READY',
                    'Attendance logging: ACTIVE',
                    'System ready for enrollment'
                ]
            };
            
            const messages = demos[project] || ['Demo not available'];
            
            // Clear terminal
            terminalContent.innerHTML = '<div class="terminal-line">$ run_demo.py --project=' + project + '</div>';
            
            let i = 0;
            const interval = setInterval(() => {
                if (i < messages.length) {
                    const line = document.createElement('div');
                    line.className = 'terminal-line';
                    line.textContent = '> ' + messages[i];
                    terminalContent.appendChild(line);
                    terminalContent.scrollTop = terminalContent.scrollHeight;
                    i++;
                } else {
                    clearInterval(interval);
                    const line = document.createElement('div');
                    line.className = 'terminal-line';
                    line.innerHTML = '> Demo complete. System ready <span class="cursor">_</span>';
                    terminalContent.appendChild(line);
                }
            }, 800);
            
            closeModal();
        }
        
        // Send message function
        function sendMessage(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            const terminalContent = document.getElementById('terminalContent');
            const line = document.createElement('div');
            line.className = 'terminal-line';
            line.style.color = '#00ff41';
            line.textContent = '> MESSAGE TRANSMITTED SUCCESSFULLY';
            terminalContent.appendChild(line);
            
            const line2 = document.createElement('div');
            line2.className = 'terminal-line';
            line2.textContent = '> Albert will respond within 24 hours';
            terminalContent.appendChild(line2);
            
            terminalContent.scrollTop = terminalContent.scrollHeight;
            
            // Reset form
            form.reset();
            
            // Show success animation
            const submitButton = form.querySelector('.submit-button');
            submitButton.textContent = 'MESSAGE SENT!';
            submitButton.style.background = 'rgba(0,255,65,0.3)';
            
            setTimeout(() => {
                submitButton.textContent = 'TRANSMIT MESSAGE';
                submitButton.style.background = 'transparent';
            }, 3000);
        }
        
        // Smooth scrolling for navigation
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
        
        // Click outside modal to close
        document.getElementById('projectModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Initialize everything when page loads
        window.addEventListener('load', function() {
            try {
                createMatrixEffect();
            } catch (error) {
                console.warn('Matrix effect failed:', error);
            }
            
            try {
                init3DRobot();
            } catch (error) {
                console.warn('3D Robot failed:', error);
            }
            
            try {
                createParticles();
            } catch (error) {
                console.warn('Particles failed:', error);
            }
        });

        // Window resize handler
        window.addEventListener('resize', function() {
            const canvas = document.querySelector('#matrixBg canvas');
            if (canvas) {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            }
        });
    </script>
</body>
</html>